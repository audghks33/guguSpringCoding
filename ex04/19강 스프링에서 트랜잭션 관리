ACID 원칙

원자성(atomicity) 하나의 트랜잭션은 모두 하나의 단위로 처리
				 A와 B로 구성 되어있다면, A,B의 처리 결과는 동일한 결과이어야 한다.
				 A는 성공, B는 실패 할 경우 A,B는 원래 상태로 되돌려져야함.

일관성(Consistency) 트랜잭션이 성공했다면 데이터베이스의 모든 데이터는 일관성을 유지해야만 한다.
					트랜잭션으로 처리된 데이터와 일반 데이터 사이에는 전혀 차이가 없어야한다.

격리(isolation)	트랜잭션으로 처리되는 중간에 외부에서의 간섭은 없어야만 한다.

영속성(Durability)	트랜잭션이 성공적으로 처리되면, 그 결과는 영속적으로 보관되어야한다.

ex) 계좌이체

데이터베이스 설계와 트랜잭션

1) 테이블을 늘리면서 2) 테이블의 데이터 양은 줄이는 정규화로 효율적인 저장 구조를 만듬

정규화를 진행하면서 원칙적으로 칼럼으로 처리하지 않는 것들.

1. 시간이 흐르면 변경되는 데이터(생년월일은 칼럼에 기록, 현재 나이는 x)
2. 계산이 가능한 데이터를 칼럼으로 기록하지 x ( 사용자가 한 번에 몇개의 상품을 주문했는지 등)
3. 누구에게나 정해진 값을 이용하는 경우 데이터베이스엥서 취급하지 않는다(2018년 1월 1일 등)

정규화를 잘 할 수록 트랜잭션은 잘 일어나지 않으나 가져오기 힘들어짐.
+ 서브쿼리 및 조인이 많아 질 수록 성능이슈가 발생할 수 있음.

pom.xml에서 라이브러리 추가

@Transactional
전파(PROPAGATION)속성
PROPAGATION_MADATORY: 작업은 반드시 특정한 트랜잭션이 존재한 상태에서만 가능
PROPAGATION_NESTED: 기존에 트랜잭션이 있는 경우, 포함되어 실행
PROPAGATION_NEVER : 트랜잭션 상황하에 실행되면 예외 발생
PROPAGATION_NOT_SUPPORTED: 트랜잭션이 있는 경우엔 트랜잭션이 끝날 떄까지 보류된 후 실행(기본)
PROPAGATION_REQUIRED_NEW: 대상은 자신만의 고유한 트랜잭션으로 실행
PROPAGATION_SUPPORTS: 트랜잭션을 필요로하지 않으나, 트랜잭션 상황하에 있따면 포함되어서 실행

격리(isolation) 레벨
DEFAULT:DB설정, 기본 격리 수준
SERIALIZABLE: 가장 높은 격리, 성능 저하의 우려가 있음.
READ_UNCOMMITED: 커밋되지 않은 데이터에 대한 읽기를 허용
READ_COMMITED:커밋된 데이터에 대해 읽기 허용
REPEATEABLE_READ: 동일 필드에 대해 다중 접근 시 모두 동일한 결과를 보장

Read-only 속성
true 인 경우 insert,update,delete실행 시 예외발생 기본은 false

Rollback-for-
특정 예외가 발생 시 강제로 Rollback

No-rollback-for
특정 예외의 발생 시에는 Rollback 처리되지 않음.

@Transactional의 적용순서
메서드>클래스>인터페이스 순으로 우선순위가 있음.
