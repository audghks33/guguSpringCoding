Authentication Manager
이전 처럼 Security-context.xml를 이용한 방법이 아닌 좀 더 현실적인 방법으로

UserDetailService 인터페이스 내
CachingUserDetailsService, InMemoryUserDetalsManager, JdbcDaoImpl, JdbcUserDetatilsManager,
LdapUserDetaillsManager,LdapUserDetilsService 등을 제공 해줌

여기서 이전 security-context.xml는 InMemoryUserDetailsmanager를 이용한 것.

이번 예제는 데이터베이스가 존재하는 상황에서 기타 프레임워크 없이 사용하는 방법.
-security-context.xml
jdbc를 쓰기 떄문에 root-context에 jdbc관련 설정을 해줌.

해당 인증/권한 관련 테이블은 JdbcUserDetailsManager의 깃헙으로 어떤 sql값을 가지는지 보고 생성하거나
스프링 시큐리티에서 지정된 SQL를 사용한다.

시큐리티의 지정된 테이블을 생성하는 SQL
create table users(
	username varchar2(50) not null primary key,
	password varchar2(50) not null,
	enabled char(1) default '1'
);

create table authorities (
	username varchar2(50) not null,
	authority varchar2(50) not null,
	constraint fk_authorities_users foreign key(username) references users(username)
);

create unique index ix_auth_username on authorities (username, authority);

insert into users (username, password) values ('user00','pw00');

insert into users (username, password) values ('member00','pw00');

insert into users (username, password) values ('admin00','pw00');



insert into authorities (username, authority) values ('user00','ROLE_USER');

insert into authorities (username, authority) values ('member00','ROLE_MANAGER');

insert into authorities (username, authority) values ('admin00','ROLE_MANAGER');

insert into authorities (username, authority) values ('admin00','ROLE_ADMIN');

select * from Users;

select * from authorities;

-security-context.xml



Unable to find Log4j2 as default logging library 에러 뜨면 pom.xml에 추가

<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>2.0.1</version>
</dependency>

<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.0.1</version>
</dependency>

혹은 resource - log4jdbc.log4j2.properties 추가 

이후
http://localhost:8080/customLogin admin00 으로 접속 시도하면 PasswordEncoder 오류 생성

4버전까지는 별도의 PasswordEncoder를 이용하고 싶지 않을 때 NoOpPasswordEncoder로 처리할 수 있지만
5버전부터는 NoOpPasswordEncoder를 사용할 수 없고 직접 암호화가 없는 PasswordEncoder를 구현해서 사용





*기존 테이블을 이용하는 경우
create table tbl_member(
	userid varchar2(50) not null primary key,
	userpw varchar2(100) not null,
	username varchar2(100) not null,
	regdate date default sysdate,
	updatedate date default sysdate,
	enabled char(1) default '1'
);

create table tbl_member_auth(
	userid varchar2(50) not null,
	auth varchar2(50) not null,
	constraint fk_member_auth foreign key(userid) references
	tbl_member(userid)
);