<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


<!-- security가 namespace에 추가된 버전은 5.0xml의 네임스페이스 이다. beans 살짝 수정 후 web.xml설정-->

	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
	
	  <!-- 기존 테이블 사용시 바로 위 NoOpPassword 주석하고 사용 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
	
	
	<security:http auto-config="true" use-expressions="true">
	
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		<!-- member로 들어가면 자동으로 로그인페이지가 생기게끔 해줌. -->
		
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
		
		<!-- <security:form-login/>  기본 페이지모양을 바꾸기 위해-->
		<!-- <security:form-login login-page="/customLogin" /> -->
			
		<!-- <security:access-denied-handler error-page="/accessError/" />	 -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<!-- 로그아웃시 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" />
		
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess" />
	
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
	
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me, JSESSION_ID"/>
	</security:http>
	
	<security:authentication-manager>
	
		<!-- <security:authentication-provider>
		user-service-ref를 추가하면
		아래 부분이랑 중복 됨. 그래서 주석처리 해줌. 이후 server login 해보면 
		InternalAuthenticationServiceException 로 의존성주입 확인 가능 -> file
		 <security:jdbc-user-service data-source-ref="dataSource" 
		users-by-username-query="select userid, userpw, enabled from tbl_member where userid= ?"
		authorities-by-username-query="select userid, auth from tbl_member_auth where userid= ?" />
		 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
			
			<!-- <security:user-service>
				
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				http://localhost:8080/sample/member로 접속할 계정 /  시큐리티5버전부턴 PasswordEncoder 꼭 있어야함. 
				포맷팅 처리를 따로 안하고싶으면 {noop} 패스워드 문자열을 붙이는 걸로 해결 가능
				개발자 도구 ->application -> cookies ->에서 쿠키 삭제로 로그인 해제가능
							
				
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
				
				

			</security:user-service>  기존 user service 변경-->
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource" /> -->
			
			
			
			<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
			<security:password-encoder ref="bcryptPasswordEncoder"/> 
			
			
		</security:authentication-provider>
	</security:authentication-manager>
	<!-- file -->
</beans>
